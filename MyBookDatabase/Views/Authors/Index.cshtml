@using MyBookDatabase.DTO
@model IEnumerable<AuthorDTO>

@{
	Func<string, string> GetLastName = (fullName) => {
		string[] parts = fullName.Split(' ');
		return parts.LastOrDefault();
	};
}
<h1>List of authors</h1>
<a class="btn btn-primary my-2" asp-action="Create">Create</a>
@foreach (var author in Model.OrderBy(author => GetLastName(author.Name))) {
	<div class="border border-dark p-2">
		<h4><a asp-action="Details" asp-route-id="@author.Id">@author.Name</a></h4>
		<h6>Born: @author.DateOfBirth.ToShortDateString()</h6>
		@if (author.DateOfDeath.HasValue) {
			<h6>Died: @author.DateOfDeath.Value.ToShortDateString()</h6>
		}
		<p>@author.Bio</p>
		<h6>Books:</h6>
		<ul>
			@foreach (var book in author.Books.OrderByDescending(book => book.PublicationDate)) {
				<li>@book.Title (@book.PublicationDate.ToString("yyyy"))</li>
			}
		</ul>
		<a class="btn btn-warning" asp-action="Update" asp-route-id="@author.Id">Edit</a>
		<form method="post">
			<button type="submit" class="btn btn-danger" asp-action="Delete" asp-route-id="@author.Id">Delete</button>
			<p>*Deleting an author will result in deleting all associated books.</p>
		</form>
	</div>
}